// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(cuid())
  name         String?
  mobile       String        @unique
  email        String        @unique
  password     String
  role         UserRole      @default(AUTHOR)
  authorStatus AuthorStatus?
  about        String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  avatar       Picture?
  posts        Post[]
  followings   User[]        @relation("follow")
  followers    User[]        @relation("follow")
  reactionsTo  Post[]        @relation("reaction")
  comments     Comment[]
}

model Category {
  id        String   @id @default(cuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts     Post[]
}

model Post {
  id          String     @id @default(cuid())
  authorId    String
  title       String
  published   Boolean    @default(false)
  publishedAt DateTime?
  content     String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  author      User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  image       Picture?
  categories  Category[]
  tags        Tag[]
  reactionsBy User[]     @relation("reaction")
  comments    Comment[]
}

model Comment {
  id              String    @id @default(cuid())
  content         String
  commenterId     String
  postId          String?
  parentCommentId String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  commenter       User      @relation(references: [id], fields: [commenterId], onDelete: Cascade)
  parentComment   Comment?  @relation("reply", fields: [parentCommentId], references: [id], onDelete: Cascade)
  replies         Comment[] @relation("reply")
  post            Post?     @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Picture {
  id        String   @id @default(cuid())
  height    Int      @default(200)
  width     Int      @default(100)
  url       String   @unique
  postId    String?  @unique
  userId    String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Tag {
  id        String   @id @default(cuid())
  title     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts     Post[]
}

enum UserRole {
  AUTHOR
  ADMIN
}

enum AuthorStatus {
  PENDING
  VERIFIED
}
