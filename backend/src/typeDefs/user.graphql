enum UserRole {
  ADMIN
  USER
  AUTHOR
}

enum AuthorStatus {
  PENDING
  VERIFIED
}

type User {
  id: ID!
  name: String
  mobile: String!
  email: String!
  password: String!
  role: UserRole!
  authorStatus: AuthorStatus
  slug: String!
  avatar: Picture
  about: String
  posts: [Post!]!
  createdAt: String!
  updatedAt: String!
}

type Profile {
  id: ID!
  avatar: Picture
  about: String
  user: User!
  createdAt: String!
  updatedAt: String!
}

type AuthorizedUserPayload {
  id: ID!
  name: String
  email: String!
  mobile: String!
  role: UserRole!
  authorStatus: AuthorStatus
  slug: String!
  avatar: String
  about: String
}

type LoginPayload {
  id: ID!
  name: String
  email: String!
  mobile: String!
  role: UserRole!
  authorStatus: AuthorStatus
  slug: String!
  avatar: Picture
  about: String
  accessToken: String!
  refreshToken: String!
}

type Tokens {
  accessToken: String!
  refreshToken: String!
}

enum RegisterUserRole {
  USER
  AUTHOR
}

input RegisterInput {
  email: String!
  password: String!
  confirmPassword: String!
  mobile: String!
  role: String!
  name: String
}

input LoginInput {
  emailOrMobile: String!
  password: String!
}

type Query {
  users: String!
}

type Mutation {
  register(data: RegisterInput): ID!
  login(data: LoginInput): LoginPayload!
  token(refreshToken: String!): Tokens!
}
