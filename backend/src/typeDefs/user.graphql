enum UserRole {
  ADMIN
  USER
  AUTHOR
}

enum AuthorStatus {
  PENDING
  VERIFIED
}

type UserFollow {
  id: ID!
  name: String
  mobile: String!
  email: String!
  avatar: Picture
}

type User {
  id: ID!
  name: String
  mobile: String!
  email: String!
  password: String
  role: UserRole!
  authorStatus: AuthorStatus
  avatar: Picture
  about: String
  posts: [Post!]!
  followings: [UserFollow!]!
  followers: [UserFollow!]!
  createdAt: String!
  updatedAt: String!
}

type Tokens {
  accessToken: String!
  refreshToken: String!
}

enum RegisterUserRole {
  USER
  AUTHOR
}

input RegisterInput {
  email: String!
  password: String!
  confirmPassword: String!
  mobile: String!
  role: String!
  name: String
}

input LoginInput {
  emailOrMobile: String!
  password: String!
}

type PaginateUsers {
  data: [User!]!
  total: Int!
  pageInfo: OffsetPageInfo
}

type CursorUserEdge {
  cursor: ID!
  node: User!
}

type CursorUserResponse {
  edges: [CursorUserEdge!]!
  pageInfo: CursorPageInfo!
  total: Int!
}

type Query {
  users: [User!]!
  usersOnOffset(limit: Int, page: Int): PaginateUsers!
  suggestAuthorsToUserOnOffset(limit: Int, page: Int): PaginateUsers!
  authorFollowersOnCursor(
    limit: Int!
    after: ID
    authorId: ID
  ): CursorUserResponse!
  authorFollowingsOnCursor(
    limit: Int!
    after: ID
    authorId: ID
  ): CursorUserResponse!
  user(id: ID!): User!
}

type Mutation {
  register(data: RegisterInput): ID!
  resendActivation(userId: ID!): ID!
  verifyUser(userId: ID!, code: String!): ID!
  login(data: LoginInput): Tokens!
  logout: ID!
  token(refreshToken: String!): Tokens!
  uploadAvatar(avatar: File!): Picture!
  updateName(name: String!): String!
  followRequest(toId: ID!): User!
  unFollowRequest(toId: ID!): ID!
}

enum FollowingMutationStatus {
  FOLLOW
  UNFOLLOW
}

enum UserMutationStatus {
  VERIFIED
  PENDING
}

type SubFollowedBY {
  followedBy: User!
  mutation: FollowingMutationStatus!
}

type SubUserStatus {
  userId: ID!
  mutation: UserMutationStatus!
}

type Subscription {
  following: SubFollowedBY!
  userVerify(userId: ID!): SubUserStatus!
}
