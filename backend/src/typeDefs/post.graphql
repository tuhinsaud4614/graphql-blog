type Post {
  id: ID!
  author: User!
  title: String!
  categories: [Category!]!
  image: Picture!
  published: Boolean!
  publishedAt: String
  content: String!
  tags: [Tag!]!
  reactionsBy: [User!]!
  comments: [Comment!]!
  createdAt: String!
  updatedAt: String!
}

# Offset types start

type OffsetPostsResponse {
  data: [Post!]!
  total: Int!
  pageInfo: OffsetPageInfo
}

type CursorPostEdge {
  cursor: ID!
  node: Post!
}

type CursorPostsResponse {
  edges: [CursorPostEdge!]!
  pageInfo: CursorPageInfo!
  total: Int!
}
# Cursor types end

input CreatePostInput {
  title: String!
  image: File!
  categories: [String!]!
  published: Boolean!
  content: String!
  tags: [String!]!
}

input UpdatePostInput {
  id: String!
  title: String
  image: File
  categories: [String!]
  published: Boolean
  content: String
  tags: [String!]
}

type Query {
  postsOnOffset(limit: Int, page: Int): OffsetPostsResponse!
  posts(limit: Int!, after: ID): CursorPostsResponse!
  # Auth required
  followingAuthorPosts(limit: Int!, after: ID): CursorPostsResponse!
  trendingPosts: [Post!]!
  post(id: ID!): Post!
  tagPosts(
    role: String!
    tag: String!
    limit: Int
    page: Int
  ): OffsetPostsResponse!
}

type Mutation {
  createPost(data: CreatePostInput): Post!
  updatePost(data: UpdatePostInput): Post!
  deletePost(id: ID!): ID!
  reactionToPost(toId: ID!): UserFollow!
}

enum EReactionsMutationStatus {
  REACT
  WITHDRAW
}

type SubReaction {
  reactBy: UserFollow!
  mutation: EReactionsMutationStatus!
}

type Subscription {
  reactions(postId: ID!): SubReaction!
}
